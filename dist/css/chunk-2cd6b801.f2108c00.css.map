{"version":3,"sources":["webpack:///src/components/common/input/src/components/common/input/Search.vue","chunk-2cd6b801.f2108c00.css","webpack:///src/components/admin/product/list/src/components/admin/product/list/ProductsFilterBar.vue","webpack:///src/pages/admin/product/src/pages/admin/product/Products.vue"],"names":[],"mappings":"AAoGA,6BACA,iBAAA,CACA,qBAAA,CACA,qBClGA,CCuFA,oBACA,iBDnFA,CEiGA,4BACA,WF7FA","file":"chunk-2cd6b801.f2108c00.css","sourcesContent":["<template>\n  <div>\n    <Input\n      :placeholder=\"placeholder\"\n      :value.sync=\"input\"\n      :maxLength=\"maxLength\"\n      @onFocus=\"onFocus\"\n      @onBlur=\"onBlur\"\n      @onInput=\"onInput\"\n      @onEnterKeyUp=\"onEnterKeyUp\"\n      ref=\"input\"\n    />\n    <button @click=\"onClickSearch\">Search</button>\n    <ul v-show=\"hasFocus\" class=\"search_box\">\n      <li v-for=\"item in dataList\" :key=\"item.id\">\n        <button @mousedown.prevent @click=\"onClickItem(item)\">\n          {{ item.text }}\n        </button>\n      </li>\n      <li v-if=\"!dataList || dataList.length < 1\">No Data</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport Input from './Input';\nimport * as _ from 'lodash';\n\nexport default {\n  name: 'Search',\n  components: {\n    Input,\n  },\n  props: {\n    dataList: Array,\n    value: String,\n    placeholder: String,\n    maxLength: Number,\n    debounceDelay: {\n      type: Number,\n      default: 300,\n    },\n  },\n  data() {\n    return {\n      hasFocus: false,\n    };\n  },\n  computed: {\n    input: {\n      get() {\n        return this.value;\n      },\n      set(value) {\n        this.$emit('update:value', value);\n      },\n    },\n  },\n  created() {\n    this.debouncedQuery = _.debounce(\n      function(value, delay) {\n        this.query(value);\n      }.bind(this),\n      this.debounceDelay,\n    );\n  },\n  methods: {\n    onFocus(e) {\n      this.hasFocus = true;\n    },\n    onBlur(e) {\n      this.hasFocus = false;\n    },\n    onInput(e) {\n      const strTrim = e.target.value.trim();\n      this.debouncedQuery(strTrim, this.debounceDelay);\n    },\n    onEnterKeyUp(e) {\n      this.$refs.input.blur();\n      this.$emit('onSearch', this.value);\n    },\n    onClickSearch() {\n      this.$emit('onSearch', this.value);\n    },\n    onClickItem(item) {\n      this.$emit('onSelectItem', item);\n      // Input 컴포넌트의 blur 메서드 호출.\n      this.$refs.input.blur();\n    },\n    async query(value) {\n      this.$emit('onInputKeyword', value);\n    },\n    // debouncedQuery: _.debounce(function(value) {\n    //   this.query(value);\n    // }, 300),\n  },\n};\n</script>\n\n<style scoped>\n.search_box {\n  position: absolute;\n  border: 1px solid #555;\n  background-color: #fff;\n}\n</style>\n","\n.search_box[data-v-2306f117] {\n  position: absolute;\n  border: 1px solid #555;\n  background-color: #fff;\n}\n\n\nul[data-v-146179b4] {\n  padding-left: 20px;\n}\n\n\n.container[data-v-062ce5d6] {\n  width: 600px;\n}\n\n\n/*# sourceMappingURL=chunk-2cd6b801.f2108c00.css.map*/","<template>\n  <div>\n    <Radio name=\"radio0\" :dataList=\"radioDatas\" :selectedId.sync=\"radioId\" />\n    <Search\n      :value.sync=\"inputValue\"\n      :dataList=\"searchDataList\"\n      @onSearch=\"onSearch\"\n      @onInputKeyword=\"onInputKeyword\"\n      @onSelectItem=\"onSelectItem\"\n    />\n    <div>\n      Status List\n      <ul>\n        <li v-for=\"item in statusList\" :key=\"item.id\">{{ item.text }}</li>\n      </ul>\n    </div>\n    <div>\n      Type List\n      <ul>\n        <li v-for=\"item in typeList\" :key=\"item.id\">{{ item.text }}</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Search from '@/components/common/input/Search';\nimport Radio from '@/components/common/radio/Radio';\nimport { mapState } from 'vuex';\n\nexport default {\n  components: {\n    Search,\n    Radio,\n  },\n  props: {\n    defaultInputValue: String,\n    defaultRadioId: String,\n    radioDatas: Array,\n  },\n  data() {\n    return {\n      inputValue: this.defaultInputValue,\n      radioId: this.defaultRadioId,\n      searchDataList: [],\n    };\n  },\n  computed: {\n    ...mapState({\n      statusList: state => state.product.statusList,\n      typeList: state => state.product.typeList,\n    }),\n  },\n  methods: {\n    onSearch() {\n      const inputValue = this.inputValue.trim();\n      if (!inputValue) return;\n\n      const ret = {\n        radioId: this.radioId,\n        inputValue: inputValue,\n      };\n\n      this.$emit('onSearch', ret);\n    },\n    onSelectItem(item) {\n      this.inputValue = item.text;\n    },\n    onInputKeyword(value) {\n      // api 호출.\n      this.searchDataList = this.getDataFake();\n    },\n    getDataFake() {\n      const length = Math.floor(Math.random() * 5);\n\n      const ret = [];\n\n      for (var i = 0; i < length; ++i) {\n        const r = Math.random()\n          .toString(36)\n          .substring(7);\n        const item = { id: i, text: r };\n        ret.push(item);\n      }\n\n      return ret;\n    },\n  },\n};\n</script>\n\n<style scoped>\nul {\n  padding-left: 20px;\n}\n</style>\n","<template>\n  <PageLayout>\n    <div class=\"container\">\n      <ProductsFilterBar\n        :radioDatas=\"radioDatas\"\n        :defaultRadioId=\"defaultRadioId\"\n        :defaultInputValue=\"defaultInputValue\"\n        @onSearch=\"onSearch\"\n      />\n      <Table\n        :dataList=\"dataList\"\n        :currentPageIndex=\"currentPageIndex\"\n        :maxRowCount=\"maxRowCount\"\n        :maxPaginationCount=\"maxPaginationCount\"\n        :totalPageCount=\"totalPageCount\"\n        @onChangePage=\"onChangePage\"\n      >\n        <template v-slot:colgroup>\n          <col style=\"width: 40px;\" />\n          <col style=\"width: 40px;\" />\n          <col style=\"width: 100px;\" />\n          <col style=\"width: 40px;\" />\n        </template>\n        <template v-slot:tr>\n          <th>id</th>\n          <th>userId</th>\n          <th>title</th>\n          <th>completed</th>\n        </template>\n        <template v-slot:rows>\n          <ProductsLine\n            v-for=\"item in dataList\"\n            :key=\"item.id\"\n            :rowData=\"item\"\n          />\n        </template>\n        <template v-slot:empty>\n          <div>No Data</div>\n        </template>\n      </Table>\n    </div>\n  </PageLayout>\n</template>\n\n<script>\nimport ProductsLine from '@/components/admin/product/list/ProductsLine';\nimport ProductsFilterBar from '@/components/admin/product/list/ProductsFilterBar';\n\nimport ListPageMixin from '@/mixins/ListPageMixin';\nimport { PRODUCT_LIST_ACTION } from '@/store/modules/product/action';\n\nexport default {\n  mixins: [ListPageMixin],\n  components: {\n    ProductsLine,\n    ProductsFilterBar,\n  },\n  data() {\n    return {\n      apiPath: this.$apiPath.PRODUCTS,\n      radioDatas: [\n        { id: 'id', text: 'id' },\n        { id: 'userId', text: 'userId' },\n        { id: 'title', text: 'title' },\n        { id: 'completed', text: 'completed' },\n      ],\n      defaultRadioId: 'title',\n      defaultInputValue: '',\n    };\n  },\n  beforeMount() {\n    this.$store.dispatch(PRODUCT_LIST_ACTION).then(() => {\n      this.getData();\n    });\n  },\n  methods: {\n    checkByQuery() {\n      const query = this.$route.query;\n\n      if (query.id) {\n        this.defaultRadioId = 'id';\n        this.defaultInputValue = query.id;\n      } else if (query.userId) {\n        this.defaultRadioId = 'userId';\n        this.defaultInputValue = query.userId;\n      } else if (query.title) {\n        this.defaultRadioId = 'title';\n        this.defaultInputValue = query.title;\n      } else if (query.completed) {\n        this.defaultRadioId = 'completed';\n        this.defaultInputValue = query.completed;\n      }\n    },\n    getSearchParams(obj) {\n      const { radioId, inputValue } = obj;\n\n      let params = {};\n\n      params[radioId] = inputValue;\n\n      return params;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  width: 600px;\n}\n</style>\n"]}